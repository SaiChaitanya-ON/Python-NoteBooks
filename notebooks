{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import itertools\n",
    "import scipy.sparse as sp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "   \n",
    "\n",
    "class GraphVisualization:\n",
    "\n",
    "    def __init__(self):\n",
    "\n",
    "\n",
    "        self.visual = []\n",
    "\n",
    "    def addEdge(self, a, b):\n",
    "        temp = [a, b]\n",
    "        self.visual.append(temp)\n",
    "\n",
    "\n",
    "    def visualize(self):\n",
    "        G = nx.Graph()\n",
    "        G.add_edges_from(self.visual)\n",
    "        nx.draw_networkx(G,node_color='grey')\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "G = GraphVisualization()\n",
    "G.addEdge(0, 1)\n",
    "G.addEdge(0, 2)\n",
    "G.addEdge(1, 2)\n",
    "G.addEdge(0, 3)\n",
    "G.addEdge(0, 4)\n",
    "G.addEdge(3, 4)\n",
    "G.addEdge(0, 5)\n",
    "\n",
    "G.visualize()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{}\n"
     ]
    }
   ],
   "source": [
    "import dgl\n",
    "import numpy as np\n",
    "import torch as th\n",
    "\n",
    "g = dgl.graph(([0, 0, 1, 0, 0, 3, 0], [1, 2, 2, 3, 4, 4, 5]), num_nodes=6)\n",
    "\n",
    "#g = dgl.graph(([0, 0, 1, 0, 0, 3, 0], [1, 2, 2, 3, 4, 4, 5]))\n",
    "\n",
    "print(g.ndata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Node Data:  {'a': tensor([[ 2.1066, -0.3390,  1.0951],\n",
      "        [-0.4331,  1.1904,  0.3982],\n",
      "        [ 0.6635, -0.8534,  0.3560],\n",
      "        [ 0.5231, -0.8542, -0.2131],\n",
      "        [ 0.1860, -1.7839, -2.1693],\n",
      "        [ 1.9720, -0.6419, -1.0800]]), 'y': tensor([[[-0.4376,  0.6287, -0.6267,  0.5215],\n",
      "         [ 1.1520,  0.9490,  0.5775,  0.0208],\n",
      "         [ 1.3067, -2.4268, -1.5051, -1.4977],\n",
      "         [-1.3306, -0.0594,  0.3451,  0.0234],\n",
      "         [-0.1107,  0.5130,  0.4655,  0.1573]],\n",
      "\n",
      "        [[-0.4207, -1.4141, -0.6834,  1.2096],\n",
      "         [ 0.9507, -0.5462, -0.1810, -1.7166],\n",
      "         [ 0.3493, -0.8228,  0.0082, -1.2870],\n",
      "         [ 1.7955,  0.3026,  0.9562, -0.7171],\n",
      "         [ 0.2842,  0.9296, -0.0566,  0.2766]],\n",
      "\n",
      "        [[ 0.2023, -0.4682,  0.4539, -1.2494],\n",
      "         [-1.9914, -2.2583,  0.9939,  0.3915],\n",
      "         [-0.2293, -1.7298, -1.8171, -0.0646],\n",
      "         [ 0.0194,  0.3603, -0.5200,  0.8592],\n",
      "         [-1.5472, -0.5784, -0.3702,  0.3299]],\n",
      "\n",
      "        [[-0.7589, -0.5293, -1.5531, -0.2190],\n",
      "         [-0.4706, -1.4357,  0.5279, -1.5283],\n",
      "         [-0.0147,  2.0480, -1.2178, -0.5810],\n",
      "         [ 0.9076, -0.7214,  0.1913, -1.3660],\n",
      "         [ 0.0935,  0.7935, -0.9273,  0.4308]],\n",
      "\n",
      "        [[ 0.6063, -0.4019,  0.1062, -0.3382],\n",
      "         [-0.9152,  0.9919,  0.8275,  1.9330],\n",
      "         [ 0.9608,  0.4664,  1.9446,  0.6368],\n",
      "         [-0.3428, -0.3784, -1.5452,  0.4483],\n",
      "         [-1.4929, -1.7842, -1.0702,  1.4332]],\n",
      "\n",
      "        [[ 0.9756,  0.1616,  0.4216,  0.4094],\n",
      "         [-0.3635,  0.3734,  2.6336, -1.4402],\n",
      "         [-1.2374,  1.0967,  0.2096,  0.1316],\n",
      "         [ 0.3172,  1.0786,  1.9662, -1.7714],\n",
      "         [ 0.0396,  1.4223, -0.4190,  0.9928]]])}\n",
      "Edge Data:  {}\n",
      "tensor([0, 1, 2, 3, 4, 5])\n"
     ]
    }
   ],
   "source": [
    "g.ndata['a'] = torch.randn(6, 3)\n",
    "\n",
    "#g.edata['b'] = torch.randn(7, 4)\n",
    "\n",
    "g.ndata['y'] = torch.randn(6, 5, 4)\n",
    "\n",
    "print(\"Node Data: \",g.ndata)\n",
    "print(\"Edge Data: \",g.edata)\n",
    "\n",
    "print(g.nodes())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "7\n",
      "5\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print(g.num_nodes())\n",
    "print(g.num_edges())\n",
    "\n",
    "print(g.out_degrees(0))\n",
    "print(g.in_degrees(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  NumNodes: 2708\n",
      "  NumEdges: 10556\n",
      "  NumFeats: 1433\n",
      "  NumClasses: 7\n",
      "  NumTrainingSamples: 140\n",
      "  NumValidationSamples: 500\n",
      "  NumTestSamples: 1000\n",
      "Done loading data from cached files.\n",
      "Features tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        ...,\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.]])\n",
      "Features.shape torch.Size([2708, 1433])\n",
      "Labels tensor([3, 4, 4,  ..., 3, 3, 3])\n",
      "Train Mask tensor([ True,  True,  True,  ..., False, False, False])\n",
      "len(Train Mask) 2708\n"
     ]
    }
   ],
   "source": [
    "import dgl.data\n",
    "\n",
    "dataset = dgl.data.CoraGraphDataset()\n",
    "g = dataset[0]\n",
    "features = g.ndata['feat']\n",
    "print('Features',features)\n",
    "print('Features.shape',features.shape)\n",
    "labels = g.ndata['label']\n",
    "print('Labels',labels)\n",
    "train_mask = g.ndata['train_mask']\n",
    "print('Train Mask',train_mask)\n",
    "print('len(Train Mask)',len(train_mask))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'feat': tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        ...,\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.]]), 'label': tensor([3, 4, 4,  ..., 3, 3, 3]), 'val_mask': tensor([False, False, False,  ..., False, False, False]), 'test_mask': tensor([False, False, False,  ...,  True,  True,  True]), 'train_mask': tensor([ True,  True,  True,  ..., False, False, False])}\n"
     ]
    }
   ],
   "source": [
    "print(g.ndata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dgl.nn import GraphConv\n",
    "\n",
    "class GCN(nn.Module):\n",
    "    def __init__(self, in_feats, h_feats, num_classes):\n",
    "        super(GCN, self).__init__()\n",
    "        self.conv1 = GraphConv(in_feats, h_feats)\n",
    "        self.conv2 = GraphConv(h_feats, num_classes)\n",
    "\n",
    "    def forward(self, g, in_feat):\n",
    "        h = self.conv1(g, in_feat)\n",
    "#         print(\"layer 1: \", h)\n",
    "#         print(\"layer 1 shape: \", h.shape)\n",
    "        h = F.relu(h)\n",
    "#         print(\"Relu: \", h)\n",
    "        h = self.conv2(g, h)\n",
    "#         print(\"layer 2: \", h)\n",
    "#         print(\"layer 2 shape: \", h.shape)\n",
    "        \n",
    "        return h\n",
    "\n",
    "# Create the model with given dimensions\n",
    "model = GCN(g.ndata['feat'].shape[1], 16, dataset.num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In epoch 0, loss: 1.947, val acc: 0.082 (best 0.082), test acc: 0.076 (best 0.076)\n",
      "In epoch 5, loss: 1.897, val acc: 0.474 (best 0.554), test acc: 0.528 (best 0.574)\n",
      "In epoch 10, loss: 1.817, val acc: 0.584 (best 0.584), test acc: 0.606 (best 0.606)\n",
      "In epoch 15, loss: 1.711, val acc: 0.736 (best 0.736), test acc: 0.743 (best 0.743)\n",
      "In epoch 20, loss: 1.580, val acc: 0.750 (best 0.756), test acc: 0.763 (best 0.764)\n",
      "In epoch 25, loss: 1.427, val acc: 0.736 (best 0.756), test acc: 0.750 (best 0.764)\n",
      "In epoch 30, loss: 1.258, val acc: 0.758 (best 0.758), test acc: 0.761 (best 0.761)\n",
      "In epoch 35, loss: 1.081, val acc: 0.772 (best 0.772), test acc: 0.769 (best 0.769)\n",
      "In epoch 40, loss: 0.907, val acc: 0.774 (best 0.774), test acc: 0.766 (best 0.765)\n",
      "In epoch 45, loss: 0.745, val acc: 0.774 (best 0.774), test acc: 0.763 (best 0.765)\n",
      "In epoch 50, loss: 0.603, val acc: 0.774 (best 0.774), test acc: 0.772 (best 0.765)\n",
      "In epoch 55, loss: 0.484, val acc: 0.778 (best 0.778), test acc: 0.773 (best 0.773)\n",
      "In epoch 60, loss: 0.387, val acc: 0.784 (best 0.784), test acc: 0.775 (best 0.775)\n",
      "In epoch 65, loss: 0.311, val acc: 0.786 (best 0.786), test acc: 0.776 (best 0.776)\n",
      "In epoch 70, loss: 0.252, val acc: 0.786 (best 0.786), test acc: 0.779 (best 0.776)\n",
      "In epoch 75, loss: 0.206, val acc: 0.782 (best 0.786), test acc: 0.780 (best 0.776)\n",
      "In epoch 80, loss: 0.170, val acc: 0.784 (best 0.786), test acc: 0.775 (best 0.776)\n",
      "In epoch 85, loss: 0.142, val acc: 0.786 (best 0.786), test acc: 0.778 (best 0.776)\n",
      "In epoch 90, loss: 0.120, val acc: 0.788 (best 0.788), test acc: 0.779 (best 0.778)\n",
      "In epoch 95, loss: 0.103, val acc: 0.786 (best 0.788), test acc: 0.780 (best 0.778)\n"
     ]
    }
   ],
   "source": [
    "def train(g, model):\n",
    "    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n",
    "    best_val_acc = 0\n",
    "    best_test_acc = 0\n",
    "\n",
    "    features = g.ndata['feat']\n",
    "    labels = g.ndata['label']\n",
    "    train_mask = g.ndata['train_mask']\n",
    "    val_mask = g.ndata['val_mask']\n",
    "    test_mask = g.ndata['test_mask']\n",
    "    \n",
    "    for e in range(100):\n",
    "    # Forward\n",
    "        logits = model(g, features)\n",
    "#         print('Logits.shape', logits.shape)\n",
    "#         print('Logits', logits)\n",
    "\n",
    "        # Compute prediction\n",
    "        pred = logits.argmax(1)\n",
    "#         print('Pred', pred)\n",
    "#         print('len(Pred)', len(pred))\n",
    "\n",
    "        # Compute loss\n",
    "        # Note that you should only compute the losses of the nodes in the training set.\n",
    "        loss = F.cross_entropy(logits[train_mask], labels[train_mask])\n",
    "\n",
    "        # Compute accuracy on training/validation/test\n",
    "        train_acc = (pred[train_mask] == labels[train_mask]).float().mean()\n",
    "    #         print('pred[train_mast] == labels[train_mask]',(pred[train_mask]==labels[train_mask]).float().mean())\n",
    "    #         print('len(pred[train_mast])',len(pred[train_mask]))\n",
    "        val_acc = (pred[val_mask] == labels[val_mask]).float().mean()\n",
    "        test_acc = (pred[test_mask] == labels[test_mask]).float().mean()\n",
    "\n",
    "        # Save the best validation accuracy and the corresponding test accuracy.\n",
    "        if best_val_acc < val_acc:\n",
    "            best_val_acc = val_acc\n",
    "            best_test_acc = test_acc\n",
    "\n",
    "        # Backward\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        if e % 5 == 0:\n",
    "            print('In epoch {}, loss: {:.3f}, val acc: {:.3f} (best {:.3f}), test acc: {:.3f} (best {:.3f})'.format(\n",
    "                e, loss, val_acc, best_val_acc, test_acc, best_test_acc))\n",
    "\n",
    "            \n",
    "model = GCN(g.ndata['feat'].shape[1], 16, dataset.num_classes)\n",
    "train(g, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dgl.nn import EdgeWeightNorm, GraphConv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[-2.3550,  0.6410],\n",
      "        [-2.2536,  0.6134],\n",
      "        [-2.0636,  0.5617],\n",
      "        [-2.1169,  0.5762],\n",
      "        [-2.7139,  0.7387],\n",
      "        [-2.1952,  0.5975]], grad_fn=<AddBackward0>)\n"
     ]
    }
   ],
   "source": [
    "g = dgl.graph(([0,1,2,3,2,5], [1,2,3,4,0,3]))\n",
    "g = dgl.add_self_loop(g)\n",
    "feat = th.ones(6, 10)\n",
    "edge_weight = th.tensor([0.5, 0.6, 0.4, 0.7, 0.9, 0.1, 1, 1, 1, 1, 1, 1])\n",
    "norm = EdgeWeightNorm(norm='both')\n",
    "norm_edge_weight = norm(g, edge_weight)\n",
    "conv = GraphConv(10, 2, norm='none', weight=True, bias=True)\n",
    "res = conv(g, feat, edge_weight=norm_edge_weight)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  NumNodes: 2708\n",
      "  NumEdges: 10556\n",
      "  NumFeats: 1433\n",
      "  NumClasses: 7\n",
      "  NumTrainingSamples: 140\n",
      "  NumValidationSamples: 500\n",
      "  NumTestSamples: 1000\n",
      "Done loading data from cached files.\n"
     ]
    }
   ],
   "source": [
    "import dgl.data\n",
    "\n",
    "dataset = dgl.data.CoraGraphDataset()\n",
    "g = dataset[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no.of edges  10556\n",
      "eids  [    0     1     2 ... 10553 10554 10555]\n",
      "eids  10556\n",
      "eids  [8094 3615 9947 ... 7651 6685 5568]\n",
      "eids  10556\n",
      "adj:    (0, 633)\t1.0\n",
      "  (0, 1862)\t1.0\n",
      "  (0, 2582)\t1.0\n",
      "  (1, 2)\t1.0\n",
      "  (1, 652)\t1.0\n",
      "  (1, 654)\t1.0\n",
      "  (2, 1)\t1.0\n",
      "  (2, 1986)\t1.0\n",
      "  (2, 332)\t1.0\n",
      "  (2, 1666)\t1.0\n",
      "  (2, 1454)\t1.0\n",
      "  (3, 2544)\t1.0\n",
      "  (4, 2176)\t1.0\n",
      "  (4, 1016)\t1.0\n",
      "  (4, 1761)\t1.0\n",
      "  (4, 1256)\t1.0\n",
      "  (4, 2175)\t1.0\n",
      "  (5, 1629)\t1.0\n",
      "  (5, 2546)\t1.0\n",
      "  (5, 1659)\t1.0\n",
      "  (6, 1416)\t1.0\n",
      "  (6, 1602)\t1.0\n",
      "  (6, 1042)\t1.0\n",
      "  (6, 373)\t1.0\n",
      "  (7, 208)\t1.0\n",
      "  :\t:\n",
      "  (2694, 431)\t1.0\n",
      "  (2694, 2695)\t1.0\n",
      "  (2695, 431)\t1.0\n",
      "  (2695, 2694)\t1.0\n",
      "  (2696, 2615)\t1.0\n",
      "  (2697, 986)\t1.0\n",
      "  (2698, 1400)\t1.0\n",
      "  (2698, 1573)\t1.0\n",
      "  (2699, 2630)\t1.0\n",
      "  (2700, 1151)\t1.0\n",
      "  (2701, 44)\t1.0\n",
      "  (2701, 2624)\t1.0\n",
      "  (2702, 186)\t1.0\n",
      "  (2702, 1536)\t1.0\n",
      "  (2703, 1298)\t1.0\n",
      "  (2704, 641)\t1.0\n",
      "  (2705, 287)\t1.0\n",
      "  (2706, 165)\t1.0\n",
      "  (2706, 169)\t1.0\n",
      "  (2706, 1473)\t1.0\n",
      "  (2706, 2707)\t1.0\n",
      "  (2707, 165)\t1.0\n",
      "  (2707, 598)\t1.0\n",
      "  (2707, 1473)\t1.0\n",
      "  (2707, 2706)\t1.0\n",
      "adj_neg:  [[0. 1. 1. ... 1. 1. 1.]\n",
      " [1. 0. 0. ... 1. 1. 1.]\n",
      " [1. 0. 0. ... 1. 1. 1.]\n",
      " ...\n",
      " [1. 1. 1. ... 0. 1. 1.]\n",
      " [1. 1. 1. ... 1. 0. 0.]\n",
      " [1. 1. 1. ... 1. 0. 0.]]\n",
      "neg_u:  [   0    0    0 ... 2707 2707 2707] neg_v:  [   1    2    3 ... 2703 2704 2705]\n"
     ]
    }
   ],
   "source": [
    "# Split edge set for training and testing\n",
    "u, v = g.edges()\n",
    "\n",
    "eids = np.arange(g.number_of_edges())\n",
    "print(\"no.of edges \",g.number_of_edges())\n",
    "print(\"eids \",eids)\n",
    "print(\"eids \",len(eids))\n",
    "eids = np.random.permutation(eids)\n",
    "print(\"eids \",eids)\n",
    "print(\"eids \",len(eids))\n",
    "test_size = int(len(eids) * 0.1)\n",
    "train_size = g.number_of_edges() - test_size\n",
    "test_pos_u, test_pos_v = u[eids[:test_size]], v[eids[:test_size]]\n",
    "train_pos_u, train_pos_v = u[eids[test_size:]], v[eids[test_size:]]\n",
    "\n",
    "# Find all negative edges and split them for training and testing\n",
    "adj = sp.coo_matrix((np.ones(len(u)), (u.numpy(), v.numpy())))\n",
    "print(\"adj: \",adj)\n",
    "adj_neg = 1 - adj.todense() - np.eye(g.number_of_nodes())\n",
    "print(\"adj_neg: \",adj_neg)\n",
    "neg_u, neg_v = np.where(adj_neg != 0)\n",
    "print(\"neg_u: \",neg_u, \"neg_v: \", neg_v)\n",
    "\n",
    "neg_eids = np.random.choice(len(neg_u), g.number_of_edges())\n",
    "test_neg_u, test_neg_v = neg_u[neg_eids[:test_size]], neg_v[neg_eids[:test_size]]\n",
    "train_neg_u, train_neg_v = neg_u[neg_eids[test_size:]], neg_v[neg_eids[test_size:]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_g = dgl.remove_edges(g, eids[:test_size])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dgl.nn import SAGEConv\n",
    "\n",
    "# ----------- 2. create model -------------- #\n",
    "# build a two-layer GraphSAGE model\n",
    "class GraphSAGE(nn.Module):\n",
    "    def __init__(self, in_feats, h_feats):\n",
    "        super(GraphSAGE, self).__init__()\n",
    "        self.conv1 = SAGEConv(in_feats, h_feats, 'mean')\n",
    "        self.conv2 = SAGEConv(h_feats, h_feats, 'mean')\n",
    "\n",
    "    def forward(self, g, in_feat):\n",
    "        h = self.conv1(g, in_feat)\n",
    "#         print(\"layer 1: \", h)\n",
    "#         print(\"layer 1 shape: \", h.shape)\n",
    "        h = F.relu(h)\n",
    "        h = self.conv2(g, h)\n",
    "#         print(\"layer 2: \", h)\n",
    "#         print(\"layer 2 shape: \", h.shape)\n",
    "        return h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Pos Graph:  Graph(num_nodes=2708, num_edges=9501,\n",
      "      ndata_schemes={}\n",
      "      edata_schemes={})\n",
      "Train Neg Graph:  Graph(num_nodes=2708, num_edges=9501,\n",
      "      ndata_schemes={}\n",
      "      edata_schemes={})\n",
      "Test Pos Graph:  Graph(num_nodes=2708, num_edges=1055,\n",
      "      ndata_schemes={}\n",
      "      edata_schemes={})\n",
      "Test Neg Graph:  Graph(num_nodes=2708, num_edges=1055,\n",
      "      ndata_schemes={}\n",
      "      edata_schemes={})\n"
     ]
    }
   ],
   "source": [
    "train_pos_g = dgl.graph((train_pos_u, train_pos_v), num_nodes=g.number_of_nodes())\n",
    "print(\"Train Pos Graph: \", train_pos_g)\n",
    "train_neg_g = dgl.graph((train_neg_u, train_neg_v), num_nodes=g.number_of_nodes())\n",
    "print(\"Train Neg Graph: \", train_neg_g)\n",
    "\n",
    "\n",
    "test_pos_g = dgl.graph((test_pos_u, test_pos_v), num_nodes=g.number_of_nodes())\n",
    "print(\"Test Pos Graph: \", test_pos_g)\n",
    "test_neg_g = dgl.graph((test_neg_u, test_neg_v), num_nodes=g.number_of_nodes())\n",
    "print(\"Test Neg Graph: \", test_neg_g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dgl.function as fn\n",
    "\n",
    "class DotPredictor(nn.Module):\n",
    "    def forward(self, g, h):\n",
    "        with g.local_scope():\n",
    "            g.ndata['h'] = h\n",
    "            # Compute a new edge feature named 'score' by a dot-product between the\n",
    "            # source node feature 'h' and destination node feature 'h'.\n",
    "            g.apply_edges(fn.u_dot_v('h', 'h', 'score'))\n",
    "            # u_dot_v returns a 1-element vector for each edge so you need to squeeze it.\n",
    "            return g.edata['score'][:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MLPPredictor(nn.Module):\n",
    "    def __init__(self, h_feats):\n",
    "        super().__init__()\n",
    "        self.W1 = nn.Linear(h_feats * 2, h_feats)\n",
    "        self.W2 = nn.Linear(h_feats, 1)\n",
    "\n",
    "    def apply_edges(self, edges):\n",
    "        \"\"\"\n",
    "        Computes a scalar score for each edge of the given graph.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        edges :\n",
    "            Has three members ``src``, ``dst`` and ``data``, each of\n",
    "            which is a dictionary representing the features of the\n",
    "            source nodes, the destination nodes, and the edges\n",
    "            themselves.\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        dict\n",
    "            A dictionary of new edge features.\n",
    "        \"\"\"\n",
    "        h = torch.cat([edges.src['h'], edges.dst['h']], 1)\n",
    "        return {'score': self.W2(F.relu(self.W1(h))).squeeze(1)}\n",
    "\n",
    "    def forward(self, g, h):\n",
    "        with g.local_scope():\n",
    "            g.ndata['h'] = h\n",
    "            g.apply_edges(self.apply_edges)\n",
    "            return g.edata['score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = GraphSAGE(train_g.ndata['feat'].shape[1], 16)\n",
    "# You can replace DotPredictor with MLPPredictor.\n",
    "#pred = MLPPredictor(16)\n",
    "pred = DotPredictor()\n",
    "\n",
    "def compute_loss(pos_score, neg_score):\n",
    "    scores = torch.cat([pos_score, neg_score])\n",
    "    labels = torch.cat([torch.ones(pos_score.shape[0]), torch.zeros(neg_score.shape[0])])\n",
    "    return F.binary_cross_entropy_with_logits(scores, labels)\n",
    "\n",
    "def compute_auc(pos_score, neg_score):\n",
    "    scores = torch.cat([pos_score, neg_score]).numpy()\n",
    "    labels = torch.cat(\n",
    "        [torch.ones(pos_score.shape[0]), torch.zeros(neg_score.shape[0])]).numpy()\n",
    "    return roc_auc_score(labels, scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In epoch 0, loss: 0.6930261254310608\n",
      "In epoch 5, loss: 0.6682918667793274\n",
      "In epoch 10, loss: 0.59809809923172\n",
      "In epoch 15, loss: 0.5275059342384338\n",
      "In epoch 20, loss: 0.4833313822746277\n",
      "In epoch 25, loss: 0.4626363217830658\n",
      "In epoch 30, loss: 0.43276864290237427\n",
      "In epoch 35, loss: 0.4098806083202362\n",
      "In epoch 40, loss: 0.38816291093826294\n",
      "In epoch 45, loss: 0.365752249956131\n",
      "In epoch 50, loss: 0.3438956141471863\n",
      "In epoch 55, loss: 0.3214678466320038\n",
      "In epoch 60, loss: 0.29867616295814514\n",
      "In epoch 65, loss: 0.2755086421966553\n",
      "In epoch 70, loss: 0.25227090716362\n",
      "In epoch 75, loss: 0.23016150295734406\n",
      "In epoch 80, loss: 0.20768390595912933\n",
      "In epoch 85, loss: 0.18656745553016663\n",
      "In epoch 90, loss: 0.16606241464614868\n",
      "In epoch 95, loss: 0.14644217491149902\n",
      "AUC 0.8576312302059702\n"
     ]
    }
   ],
   "source": [
    "# ----------- 3. set up loss and optimizer -------------- #\n",
    "# in this case, loss will in training loop\n",
    "optimizer = torch.optim.Adam(itertools.chain(model.parameters(), pred.parameters()), lr=0.01)\n",
    "\n",
    "# ----------- 4. training -------------------------------- #\n",
    "all_logits = []\n",
    "\n",
    "for e in range(100):\n",
    "    # forward\n",
    "    h = model(train_g, train_g.ndata['feat'])\n",
    "    #print(\"h: \", h)\n",
    "    pos_score = pred(train_pos_g, h)\n",
    "#     print(\"pos_score: \", pos_score)\n",
    "    neg_score = pred(train_neg_g, h)\n",
    "#     print(\"neg_score: \", neg_score)\n",
    "    loss = compute_loss(pos_score, neg_score)\n",
    "\n",
    "    # backward\n",
    "    optimizer.zero_grad()\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "\n",
    "    if e % 5 == 0:\n",
    "        print('In epoch {}, loss: {}'.format(e, loss))\n",
    "\n",
    "# ----------- 5. check results ------------------------ #\n",
    "from sklearn.metrics import roc_auc_score\n",
    "with torch.no_grad():\n",
    "    pos_score = pred(test_pos_g, h)\n",
    "    neg_score = pred(test_neg_g, h)\n",
    "    print('AUC', compute_auc(pos_score, neg_score))\n",
    "\n",
    "\n",
    "# Thumbnail Courtesy: Link Prediction with Neo4j, Mark Needham\n",
    "# sphinx_gallery_thumbnail_path = '_static/blitz_4_link_predict.png'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
